<h2>Week6</h2>

<p>
    On the 6th week, I focus on learning how to host my applicaiton
    on openshift, and play around with the ExpressJS framework, and learned
    how to compunicate between server and client side. Following
    are the five experiments I have done: <br />
    1) Openshift - Static Welcome Page <br />
    2) Openshift - JSON NodeJS response <br />
    3) Openshift - AgularJS App <br />
    4) Openshift - AgularJS App II <br />
    5) Openshift - AgularJS App III <br />
</p>

<h5>Openshift - Static Welcome Page</h5>
<p>
    This experiment creates an Openshift hosted application, which is based on 
    Express module of NodeJS. Mostly spend the time to sign up an account and intalling
    the related tools for Openshift.
</p>

<h5>Openshift - JSON NodeJS response</h5>
<p>
    This experiment creates an Openshift hosted application, which works as a web API that
    can reply clients request with a JSON document. This is the basic approach we are using
    dynamically reply the client side with back-end data.
</p>

<h5>Openshift - AgularJS App</h5>
<p>
    This experiment try to host a static Angular JS application on Openshift. This is based
    on WEEK5 Experiement3, which is single page business info favoriting app that
    support routing between different views.
</p>

<h5>Openshift - AgularJS App II</h5>
<p>
    This experiment is an upgrade for the last experiments. The downloaded client side javascript
    use the predefined server side API, to retrieve data from server's memory. Notice that the
    favorite information is stored in server memory. 
</p>

<h5>Openshift - AgularJS App III</h5>
<p>
    This experiment is an improved version of last experiement, it adds more API's on the
    server-side, so the client side script can provide more functions to the user.
</p>

<h5>Summary :</h5>
<p>
    This week's experiments, I succeed in hosting AngularJS application on Openshift. At backend,
    our server application is using Express JS as its framework. The express provide us an elegant
    way to routing different request to differenet back end logic and response back with JSON formatted
    data. Incorpate with AJAX call made by Angular JS at the front end, the app can provide a 
    dynamic and interactive web content really easy.
</p>

<hr />