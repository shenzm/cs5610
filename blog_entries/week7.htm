<h2>Week7</h2>

<p>
    On the 7th week, I focus on learning how to host my application
    on openshift, and access the MongoDB cartridge using Mongoose module.
    Following are the five experiments I have done: <br />
    1) RockMongo - Web based MongoDB UI Manager <br>
    2) Mongoose - Retrieve Data from MongoDB <br>
    3) Mongoose - Retrieve Data from MongoDB II <br>
    4) Mongoose - Insert Data into MongoDB <br>
    5) Mongoose - Remove Data from MongoDB <br>
</p>

<h5>RockMongo - Web based MongoDB UI Manager</h5>
<p>
    This experiment focus on manipulating/managing mongodb cartridge on openshift using
    another cartridge named RockMongo
</p>

<h5>Mongoose - Retrieve Data from MongoDB</h5>
<p>
    This experiment updates last week's experiment. The home page controller retrieves data
    from the MongoDB by calling the server's API.
</p>

<h5>Openshift - AgularJS App</h5>
<p>
    This experiment updates last week's experiment. The favorite page controller retrieves
    favorite relation record from the MongoDB, which calls the server's API.
</p>

<h5>Openshift - AgularJS App II</h5>
<p>
    This experiment updates last week's experiment. The home page controller insert a favorite
    relation record into the MongoDB by pressing the "heart" button, which calls the server's API.
</p>

<h5>Openshift - AgularJS App III</h5>
<p>
    This experiment updates last week's experiment. The favorite page controller can remove a
    favorite relation record from the MongoDB by pressing the "cross" button, which calls the server's API.
</p>

<h5>Summary :</h5>
<p>
    This week's experiments, I succeed in using Mongoose module to access the MongoDB through the
    app that runs on openshift. Mostly, the server side script expose Web API that can manipulate
    and manage the data records. And the controllers defined in client side scripts can easily
    invoke these Web API to implement the backend persistence of the web app.
</p>

<hr />